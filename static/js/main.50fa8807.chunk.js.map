{"version":3,"sources":["ButtonFunctions.js","Constants.js","Utils.js","App.js","index.js"],"names":["convertToJson","r","json","playSaturday","existingUsersMap","createUserPlaylistValue","selfPlaylist","otherUserId","userPlaylistMap","scopesList","messageTypes","SUCCESS","ERROR","INFO","WARNING","createProperty","text","name","func","classNames","function","BUTTON_IDS","SHUFFLE","SATURDAY","WBAB","MYSTERY_DUCK","CANDLES","BOSTON","SYNC_PLAYLISTS","buttonProperties","access_token","addNewMessage","makeRequest","body","then","response","status","type","source","catch","getAddErrorMessage","Date","getDay","JSON","stringify","context_uri","offset","position","userId","tracks","total","trackURI","items","now","track","uri","undefined","resp","start","candlesTime","end","position_ms","setTimeout","error","otherPlaylist","Promise","all","requestPlaylistUris","selfUris","toAddUris","filter","includes","length","uris","a","playlistId","playlist","trackIndex","onlyTrack","trackLength","duration_ms","songPosition","playResponse","emailConfig","requestAuth","redirectUri","encodeURIComponent","window","location","href","scopes","join","path","method","fields","queryParams","fetch","Object","keys","reduce","acc","element","index","headers","Accept","Authorization","getButtonOnClick","buttonId","getEmailLink","displayName","email","getSendEmail","userInfo","messageSource","serviceId","templateId","emailjs","send","map","item","message","App","authentication","code","hashItems","urlSearchParams","URLSearchParams","search","params","fromEntries","entries","hasOwnProperty","hash","substr","split","parts","calculateAuthentication","useState","messageList","setMessageList","user","setUser","newMessage","time","currentState","concat","slice","useEffect","startingMessage","console","log","origin","pathname","display_name","isNew","info","className","onClick","userEmail","allButtonIds","id","getButtonIdsForUser","ReactDOM","render","StrictMode","document","getElementById","process"],"mappings":"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","file":"static/js/main.50fa8807.chunk.js","sourcesContent":["import { makeRequest, requestPlaylistUris, getAddErrorMessage } from \"./Utils\";\nimport { messageTypes, candlesTime, userPlaylistMap } from \"./Constants\";\n\nconst convertToJson = (r) => r.json();\n\nexport const shuffleFunction = (name) => (access_token, addNewMessage) =>\n  makeRequest(\"me/player/shuffle?state=true\", \"PUT\", access_token, {\n    body: \"\",\n  })\n    .then((response) => {\n      const { status } = response;\n      if (status === 204) {\n        addNewMessage({\n          type: messageTypes.SUCCESS,\n          source: name,\n          text: \"Your playback has been shuffled.\",\n        });\n      } else {\n        throw response;\n      }\n    })\n    .catch(getAddErrorMessage(addNewMessage, name));\n\nexport const candlesFunction = (name) => (access_token, addNewMessage) => {\n  const { start, end } = candlesTime;\n\n  makeRequest(\"me/player/play\", \"PUT\", access_token, {\n    body: JSON.stringify({\n      context_uri: \"spotify:album:3QrkHSj8pBzE1Kwhpnktkw\",\n      offset: {\n        position: 4,\n      },\n      position_ms: start,\n    }),\n  })\n    .then((response) => {\n      const { status } = response;\n      if (status === 204) {\n        addNewMessage({\n          type: messageTypes.SUCCESS,\n          source: name,\n          text: \"Burning sage is cool.\",\n        });\n        setTimeout(() => {\n          makeRequest(\"me/player/pause\", \"PUT\", access_token, {\n            body: \"\",\n          })\n            .then((resp) => {\n              const { status: statusCode } = resp;\n              if (statusCode === 204) {\n                addNewMessage({\n                  type: messageTypes.INFO,\n                  source: name,\n                  text: \"Don't set off the fire alarm.\",\n                });\n              } else {\n                throw resp;\n              }\n            })\n            .catch((error) => {\n              addNewMessage({\n                type: messageTypes.WARNING,\n                source: name,\n                text: \"The song should've been paused here.\",\n              });\n            });\n        }, end - start);\n      } else {\n        throw response;\n      }\n    })\n    .catch(getAddErrorMessage(addNewMessage, name));\n};\n\nexport const bostonFunction = (name) => (access_token, addNewMessage) => {\n  makeRequest(\"me/player/queue\", \"POST\", access_token, undefined, {\n    uri: \"spotify:track:7rSERmjAT38lC5QhJ8hnQc\",\n  })\n    .then((response) => {\n      const { status } = response;\n      if (status === 204) {\n        makeRequest(\"me/player/next\", \"POST\", access_token, {\n          body: \"\",\n        }).then((response) => {\n          const { status } = response;\n          if (status === 204) {\n            addNewMessage({\n              type: messageTypes.SUCCESS,\n              source: name,\n              text: \"Safe travels.\",\n            });\n          } else {\n            throw response;\n          }\n        });\n      }\n    })\n    .catch(getAddErrorMessage(addNewMessage, name));\n};\n\nvar playSaturday = false;\nexport const saturdayFunction = (name) => (access_token, addNewMessage) => {\n  const day = new Date().getDay();\n\n  switch (day) {\n    case 1:\n      addNewMessage({\n        type: messageTypes.INFO,\n        source: name,\n        text: \"It is not Satuday. It is Monday, slow down.\",\n      });\n      break;\n    case 3:\n      addNewMessage({\n        type: messageTypes.INFO,\n        source: name,\n        text: \"It is not Satuday. It is Wednesday, not a sound.\",\n      });\n      break;\n    case 5:\n      addNewMessage({\n        type: messageTypes.INFO,\n        source: name,\n        text: \"It is not Satuday. It is Friday, might get loud.\",\n      });\n      break;\n    case 6:\n      addNewMessage({\n        type: messageTypes.INFO,\n        source: name,\n        text: \"It is Satuday. We paint the town!\",\n      });\n      playSaturday = true;\n      break;\n    default:\n      if (!playSaturday) {\n        addNewMessage({\n          type: messageTypes.INFO,\n          source: name,\n          text: \"It is not Satuday. Have you lost your sense of time or two?\",\n        });\n      }\n      break;\n  }\n\n  if (playSaturday) {\n    makeRequest(\"me/player/play\", \"PUT\", access_token, {\n      body: JSON.stringify({\n        context_uri: \"spotify:album:0Q5XBpCYFgUWiG9DUWyAmJ\",\n        offset: {\n          position: 4,\n        },\n      }),\n    })\n      .then((response) => {\n        const { status } = response;\n        if (status === 204) {\n          addNewMessage({\n            type: messageTypes.SUCCESS,\n            source: name,\n            text: \"Life moves slow on the ocean floor (feeling great)\",\n          });\n        } else {\n          throw response;\n        }\n      })\n      .catch(getAddErrorMessage(addNewMessage, name));\n  }\n  playSaturday = true;\n};\n\nexport const mysteryDuckFunction =\n  (name) => (access_token, addNewMessage, userId) => {\n    const { selfPlaylist } = userPlaylistMap[userId];\n\n    makeRequest(`playlists/${selfPlaylist}`, \"GET\", access_token)\n      .then((r) => r.json())\n      .then((response) => {\n        const { tracks } = response;\n        const { total, items } = tracks;\n        const trackIndex = Date.now() % total;\n        const trackURI = items[trackIndex].track.uri;\n        makeRequest(\"me/player/queue\", \"POST\", access_token, undefined, {\n          uri: trackURI,\n        })\n          .then((resp) => {\n            const { status } = resp;\n            if (status !== 204) {\n              throw resp;\n            }\n            addNewMessage({\n              type: messageTypes.SUCCESS,\n              source: name,\n              text: \"A random song from our friends has been added to the queue. <3\",\n            });\n          })\n          .catch(getAddErrorMessage(addNewMessage, name));\n      })\n      .catch(getAddErrorMessage(addNewMessage, name));\n  };\n\nexport const syncPlaylistsFunction =\n  (name) => (access_token, addNewMessage, userId) => {\n    const { selfPlaylist, otherUserId } = userPlaylistMap[userId];\n    const { selfPlaylist: otherPlaylist } = userPlaylistMap[otherUserId];\n\n    Promise.all([\n      requestPlaylistUris(selfPlaylist, access_token),\n      requestPlaylistUris(otherPlaylist, access_token),\n    ])\n      .then(([selfUris, otherUris]) => {\n        const toAddUris = otherUris.filter((uri) => !selfUris.includes(uri));\n\n        if (toAddUris.length === 0) {\n          addNewMessage({\n            type: messageTypes.INFO,\n            source: name,\n            text: \"Our playlists are already synced.\",\n          });\n        } else {\n          makeRequest(\n            `playlists/${selfPlaylist}/tracks`,\n            \"POST\",\n            access_token,\n            {\n              body: JSON.stringify({\n                uris: toAddUris,\n              }),\n            }\n          )\n            .then((response) => {\n              const { status } = response;\n              if (status !== 201) {\n                throw response;\n              }\n              addNewMessage({\n                type: messageTypes.SUCCESS,\n                source: name,\n                text: \"Our playlists have been synced. :)\",\n              });\n            })\n            .catch(getAddErrorMessage(addNewMessage, name));\n        }\n      })\n      .catch(getAddErrorMessage(addNewMessage, name));\n  };\n\nexport const wbabFunction = (name) => async (access_token, addNewMessage) => {\n  const playlistId = \"6E1FWxZoNQelXt3EAQ4Xe6\";\n\n  try {\n  } catch (error) {\n    getAddErrorMessage(addNewMessage, name)(error);\n  }\n  const playlist = await makeRequest(\n    `playlists/${playlistId}?fields=tracks.total`,\n    \"GET\",\n    access_token\n  ).then(convertToJson);\n\n  const trackIndex = Date.now() % playlist.tracks.total;\n\n  const onlyTrack = await makeRequest(\n    `playlists/${playlistId}/tracks?fields=items(track(duration_ms))&offset=${trackIndex}&limit=1`,\n    \"GET\",\n    access_token\n  ).then(convertToJson);\n\n  const trackLength = onlyTrack.items[0].track.duration_ms;\n  const songPosition = Date.now() % trackLength;\n\n  const playResponse = await makeRequest(\n    \"me/player/play\",\n    \"PUT\",\n    access_token,\n    {\n      body: JSON.stringify({\n        context_uri: `spotify:playlist:${playlistId}`,\n        offset: {\n          position: trackIndex,\n        },\n        position_ms: songPosition,\n      }),\n    }\n  );\n\n  const { status } = playResponse;\n  if (status !== 204) {\n    throw playResponse;\n  }\n\n  addNewMessage({\n    type: messageTypes.SUCCESS,\n    source: name,\n    text: \"You are listeing to WBAB 102.3 Long Island's only classic rock\",\n  });\n};\n","import {\n  shuffleFunction,\n  saturdayFunction,\n  mysteryDuckFunction,\n  candlesFunction,\n  bostonFunction,\n  syncPlaylistsFunction,\n  wbabFunction,\n} from \"./ButtonFunctions\";\n\nexport const existingUsersMap = {\n  \"dgude31@gmail.com\": 1,\n  \"emtemple211@gmail.com\": 7,\n};\n\nconst createUserPlaylistValue = (selfPlaylist, otherUserId) => ({\n  selfPlaylist,\n  otherUserId,\n});\n\nexport const userPlaylistMap = {\n  1: createUserPlaylistValue(\"5zWTsTMwKffVVwnB3V04cW\", 7),\n  7: createUserPlaylistValue(\"5gR6gvNGivsJJA5bMwolTU\", 1),\n};\n\nexport const scopesList = [\n  \"user-read-private\",\n  \"user-read-email\",\n  \"user-modify-playback-state\",\n  \"playlist-modify-public\",\n  \"playlist-modify-private\",\n  \"playlist-read-private\",\n];\n\nexport const messageTypes = {\n  SUCCESS: \"SUCCESS\",\n  ERROR: \"ERROR\",\n  INFO: \"INFO\",\n  WARNING: \"WARNING\",\n};\n\nconst createProperty = (text, name, func, classNames = []) => {\n  return { text, name, function: func(name), classNames };\n};\n\nexport const BUTTON_IDS = {\n  SHUFFLE: \"SHUFFLE\",\n  SATURDAY: \"SATURDAY\",\n  WBAB: \"WBAB\",\n  MYSTERY_DUCK: \"MYSTERY_DUCK\",\n  CANDLES: \"CANDLES\",\n  BOSTON: \"BOSTON\",\n  SYNC_PLAYLISTS: \"SYNC_PLAYLISTS\",\n};\n\nexport const buttonProperties = {\n  [BUTTON_IDS.SHUFFLE]: createProperty(\n    \"Activate Shuffle\",\n    \"Shuffle\",\n    shuffleFunction\n  ),\n  [BUTTON_IDS.SATURDAY]: createProperty(\n    \"Is it Saturday?\",\n    \"Saturday\",\n    saturdayFunction\n  ),\n  MYSTERY_DUCK: createProperty(\n    \"Mystery 🦆\",\n    \"Mystery Love\",\n    mysteryDuckFunction\n  ),\n  [BUTTON_IDS.CANDLES]: createProperty(\n    \"Don't light candles\",\n    \"Candles\",\n    candlesFunction\n  ),\n  [BUTTON_IDS.BOSTON]: createProperty(\n    \"Boston Bound\",\n    \"Boston Bound\",\n    bostonFunction\n  ),\n  [BUTTON_IDS.SYNC_PLAYLISTS]: createProperty(\n    \"Sync Playlists\",\n    \"Sync Playlists\",\n    syncPlaylistsFunction,\n    [\"sync-playlist-btn\"]\n  ),\n  [BUTTON_IDS.WBAB]: createProperty(\"Play from WBAB\", \"WBAB\", wbabFunction),\n};\n\nexport const candlesTime = { start: 13930, end: 21200 };\n\nexport const emailConfig = {\n  serviceId: \"service_sbv0ia4\",\n  templateId: \"template_fe1e5ws\",\n  userId: \"user_2K4sBJkaEW2m7T8CPrYhp\",\n};\n","import emailjs from \"emailjs-com\";\nimport {\n  scopesList,\n  messageTypes,\n  BUTTON_IDS,\n  existingUsersMap,\n  emailConfig,\n  buttonProperties,\n} from \"./Constants\";\n\nexport const calculateAuthentication = () => {\n  const authentication = { code: null, hashItems: {}, message: \"\" };\n\n  const urlSearchParams = new URLSearchParams(window.location.search);\n  const params = Object.fromEntries(urlSearchParams.entries());\n\n  if (params.hasOwnProperty(\"error\")) {\n    authentication.code = -1;\n    authentication.message = params.error;\n  } else if (!window.location.hash) {\n    authentication.code = 0;\n    authentication.message = \"Missing hash in the url\";\n  } else {\n    const hashItems = window.location.hash\n      .substr(1)\n      .split(\"&\")\n      .reduce((acc, element) => {\n        const parts = element.split(\"=\");\n        acc[parts[0]] = parts[1];\n        return acc;\n      }, {});\n    if (hashItems.hasOwnProperty(\"access_token\")) {\n      authentication.code = 1;\n      authentication.hashItems = hashItems;\n    } else {\n      authentication.code = -1;\n      authentication.message = \"Hash does not include access_token\";\n    }\n  }\n\n  return authentication;\n};\n\nexport const requestAuth = () => {\n  const redirectUri = encodeURIComponent(window.location.href);\n  const scopes = scopesList.join(\"%20\");\n  window.location.href = `https://accounts.spotify.com/authorize?client_id=125aeb2f61c242c68fe33802c481bb08&redirect_uri=${redirectUri}&scope=${scopes}&response_type=token&state=202102121300`;\n};\n\nexport const getButtonIdsForUser = (userEmail) => {\n  const allButtonIds = Object.keys(BUTTON_IDS);\n  switch (existingUsersMap[userEmail]) {\n    case 1:\n      return allButtonIds;\n    case 7:\n      return allButtonIds;\n    default:\n      return allButtonIds.filter(\n        (id) =>\n          ![\n            BUTTON_IDS.SYNC_PLAYLISTS,\n            BUTTON_IDS.MYSTERY_DUCK,\n            BUTTON_IDS.CANDLES,\n            BUTTON_IDS.WBAB,\n          ].includes(id)\n      );\n  }\n};\n\nexport const makeRequest = (\n  path,\n  method = \"GET\",\n  access_token,\n  fields = {},\n  queryParams = \"\"\n) =>\n  fetch(\n    `https://api.spotify.com/v1/${path}${\n      queryParams &&\n      Object.keys(queryParams).reduce(\n        (acc, element, index) =>\n          `${acc}${index === 0 ? \"?\" : \"&\"}${element}=${queryParams[element]}`,\n        \"\"\n      )\n    }`,\n    {\n      method,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${access_token}`,\n      },\n      ...fields,\n    }\n  );\n\nexport const getButtonOnClick =\n  (buttonId, access_token, addNewMessage = () => {}, userId) =>\n  () => {\n    buttonProperties[buttonId].function(access_token, addNewMessage, userId);\n  };\n\nconst getEmailLink = ({ displayName, email }) =>\n  `mailto:dgude31@outlook.com?subject=Gude%20Tunes%20Access&body=Hello%2C%0D%0A%0D%0AI%20would%20like%20to%20have%20access%20to%20the%20Gude%20Tunes%20website%20functionality%2C%20but%20the%20request%20button%20did%20not%20work.%20My%20name%20is%2C%20${displayName}%2C%20and%20my%20email%20is%2C%20${email}.%0D%0A%0D%0AThhank%20you!`;\n\nexport const getSendEmail = (addNewMessage, userInfo) => () => {\n  const messageSource = \"Request Access\";\n  const { serviceId, templateId, userId } = emailConfig;\n  emailjs.send(serviceId, templateId, userInfo, userId).then(\n    (response) => {\n      addNewMessage(\n        {\n          type: messageTypes.SUCCESS,\n          source: messageSource,\n          text: \"The request was put through. You should recieve a confirmation email shortly (be sure to check your junk folder).\",\n        },\n        10000\n      );\n    },\n    (error) => {\n      addNewMessage({\n        type: messageTypes.ERROR,\n        source: messageSource,\n        text: (\n          <span>\n            The request was unsuccessful. You can reach out to&nbsp;\n            <a href={getEmailLink(userInfo)}>dgude31@outlook.com</a>\n            &nbsp;directly.\n          </span>\n        ),\n      });\n    }\n  );\n};\n\nexport const requestPlaylistUris = (playlistId, access_token) =>\n  makeRequest(`playlists/${playlistId}`, \"GET\", access_token)\n    .then((resp) => {\n      const { status: statusCode } = resp;\n      if (statusCode !== 200) {\n        throw resp;\n      }\n      return resp.json();\n    })\n    .then(({ tracks: { items } }) => items.map((item) => item.track.uri));\n\nexport const getAddErrorMessage = (addNewMessage, source) => (error) => {\n  addNewMessage({\n    type: messageTypes.ERROR,\n    source,\n    text: error.message || \"It looks like something went awry.\",\n  });\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  requestAuth,\n  calculateAuthentication,\n  getButtonIdsForUser,\n  getButtonOnClick,\n  makeRequest,\n  getSendEmail,\n} from \"./Utils\";\nimport { messageTypes, buttonProperties, existingUsersMap } from \"./Constants\";\n\nfunction App() {\n  const {\n    code,\n    message,\n    hashItems: { access_token },\n  } = calculateAuthentication();\n\n  const [messageList, setMessageList] = useState([]);\n  const [user, setUser] = useState();\n\n  const addNewMessage = (newMessage, time = 6001) => {\n    setMessageList((currentState) => currentState.concat(newMessage));\n    setTimeout(() => {\n      setMessageList((currentState) => currentState.slice(1));\n    }, time);\n  };\n\n  useEffect(() => {\n    const startingMessage =\n      code === -1\n        ? {\n            type: messageTypes.ERROR,\n            text: message,\n          }\n        : code === 1\n        ? {\n            type: messageTypes.SUCCESS,\n            text: \"Login succesfull!\",\n          }\n        : {\n            type: messageTypes.INFO,\n            source: \"Welcome\",\n            text: \"Please login below to use the app.\",\n          };\n\n    addNewMessage(startingMessage);\n  }, [code, message]);\n\n  useEffect(() => {\n    if (!access_token) return;\n\n    console.log(access_token);\n    makeRequest(\"me\", \"GET\", access_token)\n      .then((r) => {\n        if (r.status === 401) {\n          window.location.href = `${window.location.origin}${window.location.pathname}`;\n        }\n        return r.json();\n      })\n      .then((response) => {\n        const { email, display_name: displayName } = response;\n        const isNew = !Object.keys(existingUsersMap).includes(email);\n        if (isNew) {\n          addNewMessage(\n            {\n              type: messageTypes.INFO,\n              source: \"Application\",\n              text: `Sorry ${displayName}, Only designated Spotify accounts can use the application. Click below to request access.`,\n            },\n            12000\n          );\n        }\n        setUser({ isNew, info: { email, displayName } });\n      })\n      .catch((error) => {\n        addNewMessage({\n          type: messageTypes.WARNING,\n          source: \"Application\",\n          text: \"Something isn't right, the app may be currently unavailable.\",\n        });\n        console.error(error);\n      });\n  }, [access_token]);\n\n  const renderMessageList = () => {\n    return (\n      <div>\n        {messageList.map((message, index) => {\n          const { type, text, source = \"\" } = message;\n          return (\n            <div key={`msg-${index}`} className={`message msg-${type}`}>\n              {source && <strong>{source}: </strong>}\n              {text}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderLoginButton = () => {\n    return (\n      <button className=\"loginButton\" onClick={requestAuth}>\n        Login\n      </button>\n    );\n  };\n\n  const renderContents = () => {\n    if (!user) {\n      return renderLoginButton();\n    }\n\n    if (user.isNew) {\n      return (\n        <button\n          key={\"NEWUSER\"}\n          className={\"utility-btn new-user-btn\"}\n          onClick={getSendEmail(addNewMessage, user.info)}\n        >\n          Request Access\n        </button>\n      );\n    }\n\n    if (code === 1) {\n      return getButtonIdsForUser(user.info.email).map((buttonId) => {\n        const { text, classNames } = buttonProperties[buttonId];\n        return (\n          <button\n            key={buttonId}\n            className={[\"utility-btn\", ...classNames].join(\" \")}\n            onClick={getButtonOnClick(\n              buttonId,\n              access_token,\n              addNewMessage,\n              existingUsersMap[user.info.email]\n            )}\n          >\n            {text}\n          </button>\n        );\n      });\n    }\n  };\n\n  return (\n    <div>\n      {renderMessageList()}\n      {renderContents()}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n//import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1 id=\"title\">Gude Tunes</h1>\n    <h3 id=\"subtitle\">Utilities to enhance your Spotify‎ experience</h3>\n    <h5 id=\"help-text\">\n      Be sure to have Spotify recently paused or playing for most utilities.\n    </h5>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nconsole.log(`Git hash: ${process.env.REACT_APP_VERSION}`);\n\n//reportWebVitals();\n"],"sourceRoot":""}